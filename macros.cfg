[save_variables]
filename: /home/pi/klipper_config/.variables.stb

#####################################################################
#   Macros
#####################################################################

[gcode_macro _CG28]
description: Conditional homing
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 { rawparams }
  {% endif %}


[gcode_macro G28]
description: G28 homing with SB LED status
rename_existing: G2828
gcode:
  LED_HOMING
  _PRINT_AR T="Homing"
  G2828 { rawparams }
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  LED_STANDBY


## NOW USING KLICKY 
#[gcode_macro Z_TILT_ADJUST]
#description: Z_TILT_ADJUST with SB LED status
#rename_existing: Z_TILT_ADJUST_BASE
#gcode:
#  STATUS_LEVELING
#  Z_TILT_ADJUST_BASE
#  STATUS_READY


## NOW USING KLICKY 
#[gcode_macro BED_MESH_CALIBRATE]
#description: BED_MESH_CALIBRATE with SB LED status
#rename_existing: BED_MESH_CALIBRATE_BASE
#gcode:
#    LED_MESHING
#    BED_MESH_CALIBRATE_BASE
#    LED_STANDBY


[gcode_macro Z_ENDSTOP_CALIBRATE]
description: Z_ENDSTOP_CALIBRATE with SB LED status
rename_existing: Z_ENDSTOP_CALIBRATE_BASE
gcode:
  LED_CALIBRATING_Z
  _PRINT_AR T="Calibrating Z"
  Z_ENDSTOP_CALIBRATE_BASE
  LED_STANDBY  # will this change before accept & save_config?


[gcode_macro PRINT_START]
description: Print Start macro called by slicer start gcode.
gcode:
  # Parameters
  {% set bedtemp = params.BED|default(60)|int %}
  {% set hotendtemp = params.HOTEND|default(215)|int %}
  {% set chambertemp = params.CHAMBER|default(0)|int %}
  {% set flSize = params.SIZE|default("0_0_0_0")|string %} # For adaptive bed mesh
  {% set _filament = params.FILAMENT|string %}

  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set filament = printer.save_variables.variables.filament %}

  # Turn off filament sensor for TPU--it doesn't trigger the switch
  {% if _filament == 'TPU' %}
    SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
  {% endif %}

  # Check if filament loaded if sensor on
  {% if not printer.save_variables.variables.filament_loaded|lower == 'true' %}
    {% set filament_detected = false %}
  {% elif printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
    {% set filament_detected = printer['filament_switch_sensor runout'].filament_detected %}
  {% else %}
    {% set filament_detected = true %}
	{% endif %}

  {% if filament_detected %}
    {% if filament.array[filament.index].name != _filament %}
      _PRINT_AR T="WARNING! Loaded filament and print file filament mismatch!"
    {% endif %}

    # Turn on webcam if it's off
    {% if printer.save_variables.variables.webcam_state == 'off' %}
      START_WEBCAM
    {% endif %}

		M141 S0                                                  # Turn off exhaust fan	
    UPDATE_DELAYED_GCODE ID=skirt_fan DURATION=0             # Stop controller fan loop
    SET_FAN_SPEED FAN=controller_fan SPEED=1                 # Turn controller fan on
  
		_CG28                                                    # Conditional Home
		G90                                                      # Set to absolute

    {% if printer["temperature_fan chamber"].temperature < chambertemp %}
		  _HEATSOAK TEMP={bedtemp} MOVE=1                        # Set up to heat soak if chamber temp is set higher than current reading
		  M190 S{bedtemp}                                       # Set target bed temp & wait for it
			TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={chambertemp}   # Do the actual heat soak wait, until chamber temp is at target
		{% else %}
			{% if printer.heater_bed.temperature < (bedtemp-2) %}
        _HEATSOAK TEMP={bedtemp} MOVE=1	        						# Bed is below target temp, get it heating & safely park toolhead
				M190 S{bedtemp}                                     # Set bed target temp & wait for it
			{% else %}
				_HEATSOAK TEMP={bedtemp} MOVE=0                      # Just do a bed heat, no champer temp (open case for PLA)
			{% endif %}
		{% endif %}
		M106 S0                                                  # Turn off part cooling fan from heatsoak

		BED_MESH_CLEAR                                           # Clear old bed mesh
    ATTACH_PROBE_LOCK                                        # Attach & lock the probe.
		Z_TILT_ADJUST                                            # Level bed & re-home Z (part of macro)	
		#BED_MESH_CALIBRATE                                       # Redo bed mesh (cribbed from Ellis)
    COMPUTE_MESH_PARAMETERS SIZE={flSize}                    # Compute the actual bed mesh size needed--if any
    ADAPTIVE_BED_MESH SIZE={flSize}                          # Run the customized bed mesh

		LED_HEATING
    G1 X{user.park.pause.x} Y{user.park.pause.y} Z20         # Move tool head to safe distance from bed
    _PRINT_AR T="Heating nozzle"
    M106 S205
		M109 S{hotendtemp}                                       # Do final nozzle heat
		CLEAN_NOZZLE                                             # Remove ooze
		CALIBRATE_Z                                              # Get current offset
    {% if user.hw.auto_z_offset_manu %}
		  _SET_PLATE_OFFSET                                     # Add current plate Z offset adjustment
		{% endif %}

	  DOCK_PROBE_UNLOCK                                        # Release the probe
	
		G92 E0                                                   # Reset extruder	
    M83                                                      # Extruder to relative
    G1 E10.0 F3600                                           # Extrude 10mm to account for clean_nozzle retraction
		PRIME_LINE                                               # Lay down prime line
		G92 E0                                                   # Reset extruder	

		LED_PRINTING                                             # Prep done, start print
		_PRINT_AR T="Printing"
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1

	{% else %} # no filament loaded
    _PRINT_AR T="No filament loaded, print canceled!"
		CANCEL_PRINT
	{% endif %}
  

[gcode_macro _HEATSOAK]
description: Helper: Set up to heat soak printer. Usage: _HEATSOAK [TEMP=temp(110)] [MOVE=move(1)]
gcode:
  {% set temp = params.TEMP|default(110)|int %}
  {% set move = params.MOVE|default(1)|int %}
	
	LED_HEATING
	_PRINT_AR T="Warming up"
	M141 S0                                                 # Turn off exhaust fan
	M140 S{temp}                                            # Heat the bed
	{% if temp >= 100 %}                                    # It's ABS or other high-temp plastic, closed case
		M104 S170                                             # Set hotend to no-ooze temp
		M106 S205                                             # Turn on part fan to 80% for 
		SET_FAN_SPEED FAN=nevermore SPEED=1                   # Turn on Nevermore fans to circulate & accelerate chamber soak
	{% else %}
		M106 S0                                               # Turn off part fan. Open case, no need
		SET_FAN_SPEED FAN=nevermore SPEED=0                   # Make sure Nevermore is off
	{% endif %}
	
	{% if move == 1 %}
		_CG28                                                 # Conditional home
		PARK P=bed                                            # Park toolhead in safe location (center volume)
		LED_HEATING
	{% endif %}


[gcode_macro PRINT_END]
description: Called from slicer end gcode. Post-print cleanup and shut down.
gcode:
  {% set _filament = params.FILAMENT|default("")|string %}
  {% set chamber = params.CHAMBER|default(0)|int %}
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set th = printer.toolhead %}
  {% set safe = {'x' : user.purge.purge.x,
   				       'y' : user.purge.purge.y,
   				       'z' : [th.position.z + 5, th.axis_maximum.z]|min} %}	 ; Define safe position (over purge bucket, lift 5mm)
  {% set vent_on    = user.peripheral.vent.on_val %}
  {% set vent_off   = user.peripheral.vent.run_after_print %}
  
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  M400																	                               ; Clear buffer
  G90																	                                 ; Absolute position
  G0 X{safe.x} Y{safe.y} Z{safe.z} F{user.speed.travel}				         ; Move to safe location, prevent stringing
  G92 E0																                               ; Reset extruder
  G1 E-{user.filament.retract.end} F{user.speed.retract}	    		     ; Retract filament
  TURN_OFF_HEATERS														                         ; Turn off the heaters
  M107																	                               ; Turn off part fan
  M141 S{vent_on}                                                      ; Turn on vent fan with defined target temp
  G0 X{user.park.pause.x} Y{user.park.pause.y} F{user.speed.travel}    ; Park toolhead at purge bucket

  {% if chamber > 0 %}                                                 ; Only if closed chamber (i.e., a temp was sent)
    UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off}        ; Set to turn off chamber fan after defined duration
    UPDATE_DELAYED_GCODE ID=_NEVERMORE_OFF DURATION={vent_off}         ; Set to turn off Nevermore fan after same delays as vent
  {% else %}
    M141 S0                                                           ; turn off chamber vent fan (ensure it's off)
    UPDATE_DELAYED_GCODE ID=_NEVERMORE_OFF DURATION=1                     ; turn off nevermore (ensure it's off)
  {% endif %} 
  
  # Turn filament sensor back on if TPU--it got turned off in PRINT_START
  {% if _filament == 'TPU' %}
    SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
  {% endif %}

  BED_MESH_CLEAR                                                       ; Clear bed mesh
  #STOP_WEBCAM                                                          ; Turn off webcam. Lighten workload on RPi
  UPDATE_DELAYED_GCODE ID=skirt_fan DURATION=5                         ; Restart controller fan loop
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=3
  LED_STANDBY
  #UPDATE_DELAYED_GCODE ID=led_sleep DURATION=7200                      ; Set to turn off LEDs after 2 hours of inactivity


##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
## Direct import from zellneralex
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  M117 {params.T} 
  {action_respond_info(params.T)}


##  Clear display output after Duration in seconds
##  Use: UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
# copied from zellneralex
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117


[gcode_macro PARK]
description: Park tool head at specified location. Usage PARK [P=[bed|center|front|frontlow|rear](bed)]
gcode:
  {% if params.P and params.P|lower is not in ['bed','center','front','frontlow','rear'] %}
    {action_respond_info("\"PARK P=%s\" not valid. Use P=[BED,CENTER,FRONT,FRONTLOW,REAR]
                            Default position BED will be used." % params.P|upper)}
  {% else %}
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}
    {% set pos = params.P|default('bed')|lower %}
    _CG28          ; Home if not already homed
    G90            ; Absolute positioning
    G0 X{user.park[pos].x} Y{user.park[pos].y} Z{user.park[pos].z} F{user.speed.travel}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set back to relative
  {% endif %}

