[save_variables]
filename: /home/pi/klipper_config/.variables.stb

#####################################################################
#   Macros
#####################################################################

[gcode_macro _CG28]
description: Conditional homing
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 { rawparams }
  {% endif %}


[gcode_macro G28]
description: G28 homing with SB LED status
rename_existing: G2828
gcode:
  #STATUS_HOMING
  #CASELIGHT_HOMING
  LED_HOMING
  _PRINT_AR T="Homing"
  G2828 { rawparams }
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  #CASELIGHT_STANDBY
  #STATUS_READY
  LED_STANDBY


## NOW USING KLICKY 
#[gcode_macro Z_TILT_ADJUST]
#description: Z_TILT_ADJUST with SB LED status
#rename_existing: Z_TILT_ADJUST_BASE
#gcode:
#  STATUS_LEVELING
#  Z_TILT_ADJUST_BASE
#  STATUS_READY


[gcode_macro Z_ENDSTOP_CALIBRATE]
description: Z_ENDSTOP_CALIBRATE with SB LED status
rename_existing: Z_ENDSTOP_CALIBRATE_BASE
gcode:
  #CASELIGHT_CALIBRATING_Z
  #STATUS_CALIBRATING_Z
  LED+CALIBRATING_Z
  Z_ENDSTOP_CALIBRATE_BASE
  #STATUS_READY  # will this change before accept & save_config?
  LED_STANDBY  # will this change before accept & save_config?


[gcode_macro BED_MESH_CALIBRATE]
description: BED_MESH_CALIBRATE with SB LED status
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
    #CASELIGHT_MESHING
    #STATUS_MESHING
    LED_MESHING
    BED_MESH_CALIBRATE_BASE
    #STATUS_READY
    #CASELIGHT_STANDBY
    LED_STANDBY


[gcode_macro PRINT_START]
gcode:
    # Parameters
    {% set bedtemp = params.BED|default(60)|int %}
    {% set hotendtemp = params.HOTEND|default(215)|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}

    _CG28                    ; only home if not already done
    G90                      ; set to absolute
    G0 X125 Y240 Z30 F3600
    _PRINT_AR T="Warming up..."
    #M117 Warming up...
    #CASELIGHT_HEATING
    #STATUS_HEATING
    LED_HEATING
    M190 S{bedtemp}                                                                  ; set & wait for bed temp
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber_temp" MINIMUM={chambertemp}  ; wait for chamber temp
    M109 S{hotendtemp}       ; set & wait for hotend temp
    #ATTACH_PROBE_LOCK        ; Attach the probe and force it to stay
    Z_TILT_ADJUST
    # Do bed mesh here? at least load it?
    CLEAN_NOZZLE 
    CALIBRATE_Z              ; instead of another z home, get actual z offset from probe
    #DOCK_PROBE_UNLOCK        ; dock the probe and unlock
    M117
    G1 E10.0 F3600            ; extrude 10mm to account for clean_nozzle retraction
    PRIME_LINE
    #CASELIGHT_PRINT
    #STATUS_PRINTING
    LED_PRINTING
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
    _PRINT_AR T="Starting Print"
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                                        ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                    ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                                       ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    #CASELIGHT_STANDBY
    #STATUS_READY
    LED_STANDBY


[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1


[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1


##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
## Direct import from zellneralex
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  #{% if params.SHOW_LCD|default('false') == 'true' %} # ignore this check--I have a display, jsut print to both
  M117 {params.T} 
  #{% endif %}
  {action_respond_info(params.T)}


# Copied from zellneralex
[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set out = ['mcu build version:'] %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% if name2 is in ['mcu_version'] %}
        {% set _dummy = out.append("%s: %s" % (name1, printer[name1][name2])) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(out|join("\n"))}
  M115.1


##  Clear display output after Duration in seconds
##  Use: UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
# copied from zellneralex
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117


[gcode_macro PARK]
description: Park head at location specified in parameter P
gcode:
  {% if params.P and params.P|lower is not in ['bed','center','front','frontlow','rear'] %}
    {action_respond_info("\"PARK P=%s\" not valid. Use P=[BED,CENTER,FRONT,FRONTLOW,REAR]
                            Default position BED will be used." % params.P|upper)}
  {% else %}
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}
    {% set pos = params.P|default('bed')|lower %}
    _CG28          ; Home if not already homed
    G90            ; Absolute positioning
    G0 X{user.park[pos].x} Y{user.park[pos].y} Z{user.park[pos].z} F{user.speed.travel}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set back to relative
  {% endif %}