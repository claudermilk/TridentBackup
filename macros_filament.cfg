##### Sourced from zellneralex
[gcode_macro _FILAMENT_BALL]
description: Helper: Round the filament tip
gcode:
  G92 E0   ; zero the extruder
  M83      ; relative extrusion
  G1 E2 F{printer['gcode_macro _USER_VARIABLE'].speed.retract * 2}
  G1 E-2
  G1 E4
  G1 E-4
  G1 E8
  G1 E-8
  G1 E-25
  G4 P{params.WAIT|default(0)|int * 1000}


[gcode_macro LOAD_FILAMENT]
description: Load filament.
gcode:
    # Load saved filament, by index or current index. If no list defined, error out.
    {% if not printer.save_variables.variables.filament %}
      {action_respond_info("FILAMENT: No Filament array defined. See ADD_FILAMENT. Aborted.")}
    {% else %}
      # Load the filament array, check that 
      {% set filament = printer.save_variables.variables.filament %}
      {% set _idx = params.INDEX|default(filament.index)|int %}

      {% if _idx < 0 or _idx > filament.array|length %}
        {action_respond_info("FILAMENT: Index out of range [0..%d]. Aborted." % (filament.array|length-1))}
      {% else %}
        {% if _idx != filament.index %}  
          SET_FILAMENT INDEX=_idx
        {% endif %}

        {% set user = printer['gcode_macro _USER_VARIABLE'] %}            # load the user variable objects
        {% set pos = printer['gcode_macro _USER_VARIABLE'].purge.purge %} # load purge position?
        {% set move_z = [user.z_hop,printer.toolhead.position.z]|max %}   # calc movement high

        {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
          _CG28                                     # home if not already homed
          CASELIGHT_LOAD
          G90                                       # absolute positioning
          G1 Z{move_z} F{user.speed.z_hop}          # move head to min
          {% if not printer.extruder.can_extrude or (printer['extruder'].temperature < filament.array[_idx].hotend) %}
            {action_respond_info("Extruder temp too low. Heating to %3.1fC" % [printer.configfile.settings.extruder.min_extrude_temp,filament.array[filament.index].hotend]|max)}
            STATUS_HEATING
            M109 S{[printer.configfile.settings.extruder.min_extrude_temp,filament.array[filament.index].hotend]|max}
            STATUS_READY
          {% endif %}

          G1 Z{pos.z} F{user.speed.z_hop} 
          M83                                                    # set to extruder relative
          G1 E{user.filament.load_distance} F{user.speed.load}   # Quickly load filament
          G1 E{user.filament.load_extrude} F{user.speed.retract} # Slower final load
          G1 E-{user.filament.retract.pause}                     # Pull back a bit
          G1 Z{move_z} F{user.speed.z_hop}                       # Move Z to ?which position?
          G1 X{pos.x} Y{pos.y} F{user.speed.travel}              # Move to purge bucket
          G1 E{user.filament.load_extrude} F{user.speed.retract} # Purge old filament
          G1 E-{user.filament.retract.end}                       # Retract to PRINT_END position
          CLEAN_NOZZLE
          M109 S{printer.extruder.target}                        # Restore old extruder temperature
          _PRINT_AR T="Filament loaded."
          SAVE_VARIABLE Variable=filament_loaded VALUE=True
          {% if not printer.gcode_move.absolute_coordinate %} G91 {% endif %} # Set printer to relative
          {% if printer.gcode_move.absolute_extrude %} M82 {% endif %}        # Set extruder to absolute
        {% else %}
          _PRINT_AR T="Filament loading disabled while printing!"
        {% endif %}
        CASELIGHT_STANDBY
      {% endif %}
    {% endif %}


[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}      # load the user variable objects
    {% if printer.save_variables.variables.filament %}
      {% set filament = printer.save_variables.variables.filament %}
    {% else %}
      {% set filament = {'array': [{'name': Undef, 'hotend': printer.configfile.settings.extruder.min_extrude_temp, 'bed': 0}], 'index': 0} %}
    {% endif %}

    CASELIGHT_UNLOAD
    {% if printer.idle_timeout_state != "Printing" or printer.pause_resume_is_paused|lower == "true" %}
      {% if not printer.extruder.can_extrude %}                 # is extruder min temp to extrude, heat up if not
        {action_respond_info("Extruder temp too low. Heating to %3.1fC" % [printer.configfile.settings.extruder.min_extrude_temp,filament.array[filament.index].hotend]|max)}
        STATUS_HEATING
        M109 S{[printer.configfile.settings.extruder.min_extrude_temp,filament.array[filament.index].hotend]|max}
        STATUS_READY
      {% endif %}

      _FILAMENT_BALL WAIT=3                                     # Create ball filament tip
      G1 E-{user.filament.unload_distance} F{user.speed.load}   # Retract the filament
      G1 E-{user.filament.unload_distance} F{user.speed.load}   # Repeat retract to get full amount
      M109 S{printer.extruder.target}                           # Restore old extruder temperature
      _PRINT_AR T="Filament unloaded"
      SAVE_VARIABLE VARIABLE=filament_loaded VALUE=False
      {% if printer.gcode_move.absolute_extrude %} M82 {% endif %}  # set extruder back to absolute
    {% else %}
      _PRINT_AR T="Filament unloading disabled while printing!"
    {% endif %}
    CASELIGHT_STANDBY


[gcode_macro ADD_FILAMENT]
description: Add a filament to the list
gcode:
    {% set name = params.NAME|default('New')|string %}
    {% set hotend = params.HOTEND|default(170)|float|round(1) %}
    {% set bed = params.BED|default(50)|float|round(1) %}
    {% if not printer.save_variables.variables.filament %}
      {action_respond_info("FILAMENT: Initialize Filament Array
                            Add filament: %s with hotend temp: %3.1fC and bed temp: %3.1fC at INDEX 0" % (name,hotend,bed))}
      {% set filament = {'array': [{'name': name, 'hotend': hotend, 'bed': bed}], 'index': 0} %}
    {% else %}
      {% set filament = printer.save_variables.variables.filament %}
      {action_respond_info("FILAMENT: Add filament: %s with hotend temp: %3.1fC and bed temp: %3.1fC at INDEX %d" % (name,hotend,bed,filament.array|length))}
      {% set _dummy = filament.array.append({'name': name, 'hotend': hotend, 'bed': bed}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=filament VALUE="{filament}"


[gcode_macro REMOVE_FILAMENT]
description: Remove a filament from the list
gcode:
    {% if not printer.save_variables.variables.filament %}
      {action_respond_info("FILAMENT: No Filament array defined. Aborted.")}
    {% else %}
      {% set filament = printer.save_variables.variables.filament %}
      {% if 'INDEX' not in params|upper %}
        {action_respond_info("FILAMENT: No INDEX defined, use REMOVE_FILAMENT INDEX=index. Aborted.")}
      {% elif filament.array|length == 1 or params.INDEX|int == filament.index %}
        {action_respond_info("FILAMENT: Last or active filament can not be removed. Aborted.")}
      {% elif params.INDEX|int < 0 or params.INDEX|int > filament.array|length %}
        {action_respond_info("FILAMENT: Index out of range [0..%d]. Aborted." % (filament.array|length-1))}
      {% else %}
        {action_respond_info("FILAMENT: Remove filament with INDEX %d from list " % params.INDEX|int)}
        {% set _dummy = filament.array.pop(params.INDEX|int) %}
        SAVE_VARIABLE VARIABLE=filament VALUE="{filament}"
      {% endif %}
    {% endif %}


[gcode_macro LIST_FILAMENTS]
description: List all saved filaments.
gcode:
    {% if not printer.save_variables.variables.filament %}
      {action_respond_info("FILAMENT: No filament array defined. Aborted.")}
    {% else %}
      {% set filament = printer.save_variables.variables.filament %}
      {% set out = ["FILAMENT: Defined Filaments"] %}
      {% for elem in range(filament.array|length) %}
        {% set _dummy = out.append("INDEX: %d -> %s -> hotend: %3.1fC -> bed: %3.1fC" %
                        (elem, filament.array[elem].name, filament.array[elem].hotend, filament.array[elem].bed)) %}
      {% endfor %}
      {% set _dummy = out.append("\n Active Filament: %s" % filament.array[filament.index].name) %}
      {action_respond_info(out|join("\n"))}
    {% endif %}


[gcode_macro SET_FILAMENT]
description: Set active filament
gcode:
    {% if not printer.save_variables.variables.filament %}
      {action_respnd_info("FILAMENT: No Filament array defined. Aborted.")}
    {% else %}
      {% set filament = printer.save_variables.variables.filament %}
      {% if 'INDEX' not in params|upper %}
        {action_respond_info("FILAMENT: No INDEX defined, use SET_FILAMENT INDEX=index. Aborted.")}
      {% elif params.INDEX|int <0 or params.INDEX|int >= filament.array|length %}
        {action_respond_info("FILAMENT: Index out of range [0..%d]. Aborted." % (filament.array|length-1))}
      {% else %}
        {% set _dummy = filament.update({'index': params.INDEX|int}) %}
        SAVE_VARIABLE VARIABLE=filament VALUE="{filament}"
        M117 Filament: {filament.array[filament.index].name}
        {action_respond_info("FILAMENT: Set filament: %s with hotend: %3.1fC, bed: %3.1fC" % 
                            (filament.array[filament.index].name,filament.array[filament.index].hotend,filament.array[filament.index].bed))}
        #UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
      {% endif %}
    {% endif %}